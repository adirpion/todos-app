{"version":3,"sources":["store.tsx","components/Todo.tsx","components/TodoList.tsx","components/Note.tsx","components/NoteList.tsx","components/AddNote.tsx","App.tsx","index.tsx"],"names":["noteId","todoId","TodoStore","observable","action","name","notes","length","alert","push","id","createDate","Date","now","lastEdit","todos","n","newone","filter","note","completed","todo","Todo","inject","observer","handleChange","injected","todoStore","handleTodo","props","className","type","checked","this","onChange","style","textDecoration","color","Component","TodoList","map","item","Note","inputElement","state","todoInput","setTodo","e","setState","target","value","addTodo","addTodoItem","current","deleteNote","React","createRef","width","moment","format","ref","placeholder","onClick","disabled","marginLeft","NoteList","AddTodo","setNoteName","text","addNote","marginBottom","App","AddNote","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.80a8bb3e.chunk.js","sourcesContent":["import {observable, action} from 'mobx';\r\n\r\nlet noteId = 0;\r\nlet todoId = 0;\r\n\r\nexport interface INote {\r\n    id: number;\r\n    name: string;\r\n    createDate: number;\r\n    lastEdit: number;\r\n    todos: TodoItem[];\r\n};\r\n\r\nexport interface TodoItem {\r\n    id: number;\r\n    name: string;\r\n    completed: boolean;\r\n}\r\n\r\nexport class TodoStore {\r\n    @observable notes: INote[] = [];\r\n \r\n    @action addNote = (name: string) =>{\r\n        if(this.notes.length >= 10){\r\n            alert(\"Maximum notes is 10\")\r\n        }else{\r\n            this.notes.push({\r\n                id: noteId++,\r\n                name,\r\n                createDate: Date.now(),\r\n                lastEdit: Date.now(),\r\n                todos: []\r\n            });\r\n        }   \r\n    }\r\n\r\n    @action deleteNote = (n:number) => {\r\n        let newone = this.notes.filter(note =>  note.id !== n);\r\n        this.notes = newone;\r\n    }\r\n \r\n    @action addTodoItem = (name: string, note: INote) => {\r\n        if(note){\r\n            note.lastEdit = Date.now();\r\n            note.todos.push({\r\n                id: todoId++,\r\n                name,\r\n                completed: false\r\n            });\r\n        }\r\n    }\r\n\r\n    @action handleTodo = (todo : TodoItem) => {\r\n        todo.completed = !todo.completed;\r\n    }\r\n\r\n} ","import React, { Component } from 'react';\nimport { TodoStore, TodoItem } from '../store';\nimport { inject, observer } from 'mobx-react';\n\ninterface TodoProps {\n    todo: TodoItem;\n}\ninterface Injected extends TodoProps {\n    todoStore: TodoStore;\n}\n@inject('todoStore')\n@observer\nexport default class Todo extends Component<TodoProps> {\n\n    get injected() {\n        return this.props as Injected;\n    }\n\n    public handleChange = () => {\n        this.injected.todoStore.handleTodo(this.props.todo)\n    }\n\n    render() {\n        return (\n            <div className=\"ui checkbox todo\">\n                <input \n                    type=\"checkbox\" \n                    checked={this.props.todo.completed}\n                    onChange={this.handleChange}\n                />\n                <label \n                    style={{\n                        textDecoration: this.props.todo.completed ? \"line-through\" : \"none\",\n                        color: this.props.todo.completed ? \"gray\" : \"black\"\n                    }}>\n                    {this.props.todo.name}\n                </label>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { TodoItem } from '../store';\nimport Todo from './Todo';\nimport { observer } from 'mobx-react';\n\ninterface TodoProps {\n    todos: TodoItem[];\n}\n\n@observer\nclass TodoList extends Component<TodoProps> {\n    render() {\n        return (\n            <div>\n                {this.props.todos.map(item => <Todo todo={item} />)}\n            </div>\n        )\n    }\n}\n\nexport default TodoList;","import React, { Component } from 'react';\r\nimport { INote, TodoStore } from '../store';\r\nimport TodoList from './TodoList';\r\nimport {inject} from 'mobx-react';\r\nimport moment from 'moment';\r\n \r\ninterface NoteProps {\r\n    note: INote;\r\n}\r\n\r\ninterface Injected extends NoteProps {\r\n    todoStore: TodoStore;\r\n}\r\n\r\n@inject('todoStore')\r\nexport default class Note extends Component<NoteProps> {\r\n    private inputElement: React.RefObject<HTMLInputElement>;\r\n    constructor(props:NoteProps){\r\n        super(props);\r\n        this.inputElement = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        todoInput: \"\"\r\n    }\r\n\r\n    get injected() {\r\n        return this.props as Injected;\r\n    }\r\n\r\n    setTodo = (e: any) => {\r\n        this.setState({ todoInput: e.target.value })\r\n    }\r\n\r\n    addTodo = () => {\r\n        if (!this.state.todoInput) {\r\n            return;\r\n        }\r\n        this.injected.todoStore.addTodoItem(this.state.todoInput, this.props.note);\r\n        this.inputElement.current!.value = '';\r\n        this.setState({ todoInput: '' })\r\n    }\r\n\r\n    deleteNote = () =>{\r\n        this.injected.todoStore.deleteNote(this.props.note.id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ui card note\" style={{width: \"310px\"}}>\r\n                <h1><div className=\"ui black tag label\">{this.props.note.name}</div></h1>\r\n                <span className=\"date\">Created at: {moment(this.props.note.createDate).format('lll')}</span>\r\n                <span className=\"date\">Last edit: {moment(this.props.note.lastEdit).format('lll')}</span>\r\n                <p>\r\n                <div className=\"ui input\">\r\n                    <input ref={this.inputElement} type=\"text\" placeholder=\"Add a Todo\" onChange={this.setTodo} />\r\n                    <button \r\n                        onClick={this.addTodo}\r\n                        disabled={!this.state.todoInput}\r\n                        style={{marginLeft: \"10px\"}} \r\n                        className=\"ui secondary button\">\r\n                    Add Todo\r\n                    </button>\r\n                </div>\r\n                <div onClick={this.deleteNote} className=\"delete-note\"><span>X</span></div>\r\n                </p>\r\n                <TodoList todos={this.props.note.todos}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport { inject, observer} from 'mobx-react';\r\nimport { INote } from '../store';\r\nimport Note from './Note';\r\n\r\ninterface NoteStore {\r\n    todoStore? : NoteProps;\r\n}\r\n\r\ninterface NoteProps {\r\n    notes : INote[];\r\n}\r\n\r\n@inject('todoStore')\r\n@observer\r\nclass NoteList extends Component<NoteStore>{\r\n    render(){\r\n        return (\r\n            <div className=\"ui four column doubling stackable grid container note-container\">\r\n                { this.props.todoStore!.notes.map((item:INote) => <p><Note note={item} /></p>) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NoteList;\r\n","import React, { Component } from 'react';\r\nimport { inject } from 'mobx-react';\r\nimport { TodoStore } from '../store';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\ninterface AddTodoProps {}\r\n\r\ninterface AddTodoState {\r\n    name: string;\r\n}\r\n\r\ninterface Injected extends AddTodoProps {\r\n    todoStore: TodoStore;\r\n}\r\n\r\n@inject('todoStore')\r\nclass AddTodo extends Component<AddTodoProps, AddTodoState> {\r\n    \r\n    private inputElement: React.RefObject<HTMLInputElement>;\r\n    constructor(props: any){\r\n        super(props)\r\n\r\n        this.state = {\r\n            name: \"\"\r\n        }\r\n        this.inputElement = React.createRef();\r\n    }\r\n    \r\n    get injected() {\r\n        return this.props as Injected;\r\n    }\r\n\r\n    setNoteName = (text: any) => this.setState({name: text.target.value});\r\n\r\n    addNote = () =>{\r\n        this.injected.todoStore.addNote(this.state.name);\r\n        this.inputElement.current!.value = '';\r\n        this.setState({name: ''});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ui input focus\" style={{marginBottom:\"2rem\"}}>\r\n                <input ref={this.inputElement} type=\"text\" placeholder=\"Add a note\" onChange={this.setNoteName} />\r\n                <button \r\n                disabled={!this.state.name}\r\n                onClick={this.addNote} style={{marginLeft: \"10px\"}} className=\"ui primary button\">Add Note</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React from 'react';\nimport NoteList from './components/NoteList';\nimport AddNote from './components/AddNote';\nimport './App.css';\n\nconst App = () => {\n  return (\n      <div className=\"App\">\n        <h1>Todos App</h1>\n        <AddNote />\n        <NoteList />\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from \"mobx-react\";\nimport { TodoStore } from './store';\nimport App from './App';\n\nconst Root = (\n    <Provider todoStore={new TodoStore()}>\n        <App />\n    </Provider>\n); \n\nReactDOM.render(Root, document.getElementById('root'));\n\n\n"],"sourceRoot":""}